"""
Entit√© Unit - Entit√© m√©tier repr√©sentant une unit√© dans un projet.

Cette entit√© repr√©sente une unit√© individuelle dans un projet de condominium.
Elle encapsule les propri√©t√©s et comportements essentiels d'une unit√©,
ind√©pendamment de toute infrastructure ou technologie externe.

[Architecture Hexagonale]
Cette entit√© fait partie du domaine m√©tier (core) et ne d√©pend d'aucun adapter
ou port. Elle peut √™tre test√©e de mani√®re isol√©e et r√©utilis√©e dans diff√©rents
contextes.
"""

from src.infrastructure.logger_manager import get_logger
logger = get_logger(__name__)

from dataclasses import dataclass
from datetime import datetime
from decimal import Decimal
from typing import Optional
from enum import Enum


class UnitStatus(Enum):
    """Statut d'une unit√©."""
    AVAILABLE = "available"
    RESERVED = "reserved"
    MAINTENANCE = "maintenance"
    INACTIVE = "inactive"
    NONE = "none" # Utilis√© principalement pour indiqu√© que c'est occup√© par le propri√©taire


class UnitType(Enum):
    """Type d'unit√© selon la fonction."""
    RESIDENTIAL = "RESIDENTIAL"
    COMMERCIAL = "COMMERCIAL"
    PARKING = "PARKING"
    STORAGE = "STORAGE"


@dataclass
class Unit:
    """
    Entit√© repr√©sentant une unit√© dans un projet de condominium.
    
    Cette entit√© encapsule toute la logique m√©tier li√©e √† une unit√©,
    incluant les calculs de frais, validations, et r√®gles
    de gestion sp√©cifiques.
    
    Attributs:
        id: ID de base de donn√©es SQLite (auto-incr√©ment√©)
        unit_number: Num√©ro unique de l'unit√© (ex: 'A-101', 'P-001')
        project_id: ID du projet auquel appartient cette unit√©
        area: Superficie en pieds carr√©s
        unit_type: Type d'unit√© (r√©sidentiel, commercial, parking, etc.)
        status: Statut actuel (disponible, vendu, r√©serv√©, maintenance)
        estimated_price: Prix estim√© de l'unit√©
        owner_name: Nom du propri√©taire (None si disponible)
        calculated_monthly_fees: Frais mensuels calcul√©s (peut √™tre JSON)
        created_at: Date de cr√©ation
        updated_at: Date de derni√®re modification
    """
    
    # Attributs obligatoires
    unit_number: str
    project_id: str
    area: float
    unit_type: UnitType
    status: UnitStatus
    
    # Attributs optionnels
    id: Optional[int] = None  # ID de base de donn√©es SQLite
    estimated_price: Optional[float] = None
    owner_name: Optional[str] = None
    calculated_monthly_fees: Optional[str] = None
    created_at: datetime = None
    updated_at: datetime = None
    
    def __post_init__(self):
        """Validation et initialisation apr√®s cr√©ation."""
        # Permettre les num√©ros d'unit√© vides pour les unit√©s vierges en configuration
        # Dans ce cas, le gestionnaire assignera le num√©ro plus tard
        if self.unit_number is None:
            raise ValueError("Le num√©ro d'unit√© ne peut pas √™tre None")
            
        # Cha√Æne vide autoris√©e pour les unit√©s vierges
        if self.unit_number == "":
            pass  # OK pour unit√©s vierges
        elif not self.unit_number.strip():
            raise ValueError("Le num√©ro d'unit√© ne peut pas √™tre compos√© uniquement d'espaces")
        
        if not self.project_id or not self.project_id.strip():
            raise ValueError("L'ID du projet ne peut pas √™tre vide")
            
        # Permettre superficie 0 pour les unit√©s vierges en configuration
        if self.area == 0:
            pass  # OK pour unit√©s vierges
        elif self.area < 0:
            raise ValueError("La superficie ne peut pas √™tre n√©gative")
            
        # Initialiser les dates si n√©cessaire
        now = datetime.now()
        if self.created_at is None:
            self.created_at = now
        if self.updated_at is None:
            self.updated_at = now
    
    def calculate_monthly_fees(self) -> float:
        """
        Calcule les frais mensuels pour cette unit√©.
        
        Returns:
            float: Frais mensuels calcul√©s
        """
        # Calcul par d√©faut bas√© sur le type et la superficie
        rate_per_sqft = {
            UnitType.RESIDENTIAL: 0.45,
            UnitType.COMMERCIAL: 0.60,
            UnitType.PARKING: 0.375,
            UnitType.STORAGE: 0.30
        }
        
        base_rate = rate_per_sqft.get(self.unit_type, 0.45)
        return float(self.area * base_rate)
    
    @property
    def monthly_fees(self) -> float:
        """
        Propri√©t√© pour acc√©der aux frais mensuels.
        Utilise la valeur stock√©e (calculated_monthly_fees) si disponible,
        sinon utilise le calcul automatique.
        
        Returns:
            float: Frais mensuels pour cette unit√©
        """
        # Priorit√© √† la valeur stock√©e
        if self.calculated_monthly_fees is not None:
            try:
                return float(self.calculated_monthly_fees)
            except (ValueError, TypeError):
                # Si conversion √©choue, utiliser le calcul comme fallback
                pass
        
        # Fallback sur le calcul automatique
        return self.calculate_monthly_fees()
    
    @property
    def square_feet(self) -> float:
        """
        Propri√©t√© pour acc√©der √† la superficie (alias pour area).
        
        Returns:
            float: Superficie en pieds carr√©s
        """
        return self.area
    
    @property
    def type_icon(self) -> str:
        """
        Ic√¥ne correspondant au type d'unit√©.
        
        Returns:
            str: Emoji repr√©sentant le type d'unit√©
        """
        icons = {
            UnitType.RESIDENTIAL: "üè†",
            UnitType.COMMERCIAL: "üè¢",
            UnitType.PARKING: "üöó",
            UnitType.STORAGE: "üì¶"
        }
        return icons.get(self.unit_type, "üè†")
    
    @property
    def status_icon(self) -> str:
        """
        Ic√¥ne correspondant au statut de l'unit√©.
        
        Returns:
            str: Emoji repr√©sentant le statut
        """
        icons = {
            UnitStatus.AVAILABLE: "‚úÖ",
            UnitStatus.RESERVED: "‚è≥",
            UnitStatus.MAINTENANCE: "üîß",
            UnitStatus.INACTIVE: "‚ùå",           # AJOUT: Ic√¥ne pour statut inactif
            UnitStatus.NONE: "üè†"
        }
        return icons.get(self.status, "‚ùì")
    
    def is_available(self) -> bool:
        """V√©rifie si l'unit√© est disponible."""
        return self.status == UnitStatus.AVAILABLE

        
        logger.info(f"Unit√© {self.unit_number} vendue √† {self.owner_name}")
    
    def transfer_ownership(self, owner_name: str, purchase_date: datetime = None) -> None:
        """
        Transf√®re la propri√©t√© de l'unit√©.
        
        Args:
            owner_name: Nom du nouveau propri√©taire
            purchase_date: Date d'achat (par d√©faut maintenant)
        """
        if purchase_date is None:
            purchase_date = datetime.now()
            
        self.owner_name = owner_name
        self.purchase_date = purchase_date
        self.status = UnitStatus.AVAILABLE  # Status reste available
        self.updated_at = datetime.now()
        
        logger.debug(f"Unit√© {self.unit_number} transf√©r√©e √† {owner_name}")
    
    def make_available(self) -> None:
        """Rend l'unit√© disponible."""
        self.owner_name = None
        self.status = UnitStatus.AVAILABLE
        self.purchase_date = None
        self.updated_at = datetime.now()
        
        logger.info(f"Unit√© {self.unit_number} rendue disponible")
    
    def reserve(self) -> None:
        """R√©serve l'unit√©."""
        if self.status != UnitStatus.AVAILABLE:
            raise ValueError("Seules les unit√©s disponibles peuvent √™tre r√©serv√©es")
        
        self.status = UnitStatus.RESERVED
        self.updated_at = datetime.now()
        
        logger.info(f"Unit√© {self.unit_number} r√©serv√©e")
    
    def set_maintenance(self) -> None:
        """Met l'unit√© en maintenance."""
        self.status = UnitStatus.MAINTENANCE
        self.updated_at = datetime.now()
        
        logger.info(f"Unit√© {self.unit_number} mise en maintenance")
    
    def update_area(self, new_area: float) -> None:
        """
        Met √† jour la superficie de l'unit√©.
        
        Args:
            new_area: Nouvelle superficie
        """
        if new_area <= 0:
            raise ValueError("La superficie doit √™tre positive")
        
        old_area = self.area
        self.area = new_area
        self.updated_at = datetime.now()
        
        logger.info(f"Superficie unit√© {self.unit_number} mise √† jour: {old_area} -> {new_area} pi¬≤")
    
    def get_display_info(self) -> dict:
        """
        Retourne les informations d'affichage pour l'interface utilisateur.
        
        Returns:
            dict: Informations format√©es pour l'affichage
        """
        return {
            'unit_number': self.unit_number,
            'type': self.unit_type.value.title(),
            'area': f"{self.area:.0f} pi¬≤",
            'status': self.status.value.title(),
            'owner': self.owner_name or "Disponible",
            'monthly_fees': f"${self.calculate_monthly_fees():.2f}",
            'is_available': self.is_available()
        }
    
    @classmethod
    def from_dict(cls, data: dict) -> 'Unit':
        """
        Cr√©e une instance Unit √† partir d'un dictionnaire.
        
        Args:
            data: Dictionnaire contenant les donn√©es de l'unit√©
            
        Returns:
            Unit: Instance cr√©√©e
        """
        # Conversion des types enum
        unit_type = data.get('unit_type')
        if isinstance(unit_type, str):
            unit_type = UnitType(unit_type.upper())
        
        status = data.get('status')
        if isinstance(status, str):
            status = UnitStatus(status.lower())
        
        # Conversion des dates
        created_at = data.get('created_at')
        if isinstance(created_at, str):
            created_at = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
        
        updated_at = data.get('updated_at')
        if isinstance(updated_at, str):
            updated_at = datetime.fromisoformat(updated_at.replace('Z', '+00:00'))
        
        return cls(
            id=data.get('id'),
            unit_number=data['unit_number'],
            project_id=data['project_id'],
            area=float(data['area']),
            unit_type=unit_type,
            status=status,
            estimated_price=data.get('estimated_price'),
            owner_name=data.get('owner_name'),
            calculated_monthly_fees=data.get('calculated_monthly_fees'),
            created_at=created_at,
            updated_at=updated_at
        )
    
    def to_dict(self) -> dict:
        """
        Convertit l'unit√© en dictionnaire.
        
        Returns:
            dict: Repr√©sentation en dictionnaire
        """
        return {
            'id': self.id,
            'unit_number': self.unit_number,
            'project_id': self.project_id,
            'area': self.area,
            'unit_type': self.unit_type.value,
            'status': self.status.value,
            'estimated_price': self.estimated_price,
            'owner_name': self.owner_name,
            'calculated_monthly_fees': self.calculated_monthly_fees,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None
        }
